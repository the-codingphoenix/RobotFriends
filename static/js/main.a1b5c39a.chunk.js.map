{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","React","createElement","className","src","concat","alt","CardList","robots","map","robot","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","Component","constructor","super","this","state","hasError","componentDidCatch","error","info","setState","render","App","onSearchChange","bind","componentDidMount","fetch","then","response","json","users","event","target","value","filteredRobots","filter","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode"],"mappings":"sRAgBeA,MAbFC,IAAwB,IAAvB,KAACC,EAAI,MAAEC,EAAK,GAAEC,GAAGH,EAE3B,OACII,IAAAC,cAAA,OAAKC,UAAU,yCACXF,IAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BL,EAAE,YAAYM,IAAI,WACpDL,IAAAC,cAAA,WACID,IAAAC,cAAA,UAAKJ,GACLG,IAAAC,cAAA,SAAIH,MCWLQ,MAlBEV,IAAiB,IAAhB,OAAEW,GAAQX,EACxB,OACII,IAAAC,cAAA,OAAKC,UAAU,iCAEPK,EAAOC,IAAI,CAACC,EAAOC,IAEXV,IAAAC,cAACN,EAAI,CACDgB,IAAKD,EACLX,GAAIU,EAAMV,GACVF,KAAMY,EAAMZ,KACZC,MAAOW,EAAMX,W,MCO1Bc,MAhBGhB,IAAoC,IAAnC,YAAEiB,EAAW,aAAEC,GAAclB,EAC5C,OACII,IAAAC,cAAA,WAEID,IAAAC,cAAA,SACIC,UAAU,qCACVa,KAAK,SACLC,YAAY,gBACZnB,KAAK,SACLE,GAAG,SACHkB,SAAUH,MCJXI,MAPCC,GAERnB,IAAAC,cAAA,OAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,oBAAqBC,OAAQ,UAClEJ,EAAMK,UCJnB,MAAMC,UAAsBC,YACxBC,YAAYR,GACRS,MAAMT,GACNU,KAAKC,MAAQ,CACTC,UAAU,GAKlBC,kBAAkBC,EAAOC,GACrBL,KAAKM,SAAS,CAAEJ,UAAU,IAI9BK,SACI,OAAOP,KAAKC,MAAMC,SACd/B,IAAAC,cAAA,UAAI,sBAEJ4B,KAAKV,MAAMK,UAIRC,Q,MChBf,MAAMY,UAAYX,YACdC,cACIC,QAEAC,KAAKC,MAAQ,CACTvB,OAAQ,GACRM,YAAa,IAGjBgB,KAAKS,eAAiBT,KAAKS,eAAeC,KAAKV,MAInDW,oBAEIC,MAAM,8CACDC,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,IAAWhB,KAAKM,SAAS,CAAE5B,OAAQsC,MAIjDP,eAAeQ,GAEXjB,KAAKM,SAAS,CAAEtB,YAAaiC,EAAMC,OAAOC,QAG9CZ,SACI,MAAM,OAAC7B,EAAM,YAAEM,GAAegB,KAAKC,MAE7BmB,EAAiB1C,EAAO2C,OAAOzC,GAC1BA,EAAMZ,KAAKsD,cAAcC,SAASvC,EAAYsC,gBAIzD,OAAQ5C,EAAO8C,OAIXrD,IAAAC,cAAA,OAAKC,UAAU,MACXF,IAAAC,cAAA,MAAIC,UAAU,MAAK,eAEnBF,IAAAC,cAACW,EAAS,CAACE,aAAce,KAAKS,iBAE9BtC,IAAAC,cAACiB,EAAM,KACHlB,IAAAC,cAACwB,EAAa,KAEVzB,IAAAC,cAACK,EAAQ,CAACC,OAAQ0C,OAV9BjD,IAAAC,cAAA,UAAI,YAkBDoC,QClDAiB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,KAAK9C,IAAkD,IAAjD,OAAE6D,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASjE,EACpE6D,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,M,MCADO,IAASC,WAAWC,SAASC,eAAe,SACpD7B,OACHpC,IAAAC,cAACD,IAAMkE,WAAU,KACflE,IAAAC,cAACoC,EAAG,QAORiB,M","file":"static/js/main.a1b5c39a.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\nconst Card = ({name, email, id}) => {\n    // const { name, email, id } = props;\n    return (\n        <div className='tc dib pa3 ma2 grow bw2 shadow-2 card'>\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div className='flex flex-wrap justify-center'>\n            {\n                robots.map((robot, i) => {\n                    return (\n                        <Card   \n                            key={i}\n                            id={robot.id}\n                            name={robot.name}\n                            email={robot.email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\nexport default CardList;","import React from 'react';\nimport './SearchBox.css'\n\n// Functional component for the search input box\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div>\n            {/* Input element for searching robots */}\n            <input \n                className='pa3 ba b--red bg-washed-red search' // Tachyons classes for styling\n                type='search' // Input type is search\n                placeholder='search robots' // Placeholder text for the input field\n                name='search' // Name attribute for the input field\n                id='search' // ID attribute for the input field\n                onChange={searchChange} // Event handler for detecting changes in the input field\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '4px solid #151515', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n\n    // Lifecycle method to catch errors in children components\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n        // You can also log error info to an error reporting service here\n    }\n\n    render() {\n        return this.state.hasError ? \n            <h1>Ooooops. Not good!</h1> \n            : \n            this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\n// Main App component\nclass App extends Component {\n    constructor() {\n        super();\n        // Initializing the state with an empty list of robots and an empty search field\n        this.state = {\n            robots: [], \n            searchfield: ''\n        };\n        // Binding the method to the current instance of the class\n        this.onSearchChange = this.onSearchChange.bind(this);\n    }\n\n    // Lifecycle method called after the component is mounted\n    componentDidMount() {\n        // Fetching users data from the API and setting it to the robots state\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => { this.setState({ robots: users }) });\n    }\n\n    // Method to handle changes in the search input\n    onSearchChange(event) {\n        // Update the state with the new value of the search field\n        this.setState({ searchfield: event.target.value });\n    }\n\n    render() {\n        const {robots, searchfield} = this.state;\n        // Filtering the robots based on the search field input\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        });\n\n        // Check if robots data is still loading\n        return !robots.length ? \n            // Show loading message while fetching data\n            <h1>Loading</h1> :\n        (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                {/* Passing the searchChange method to the SearchBox component */}\n                <SearchBox searchChange={this.onSearchChange} />\n                {/* Wrapping the CardList component with the Scroll component for scrollable content */}\n                <Scroll>\n                    <ErrorBoundary>\n                        {/* Passing the filtered robots to the CardList component */}\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}